from telethon import TelegramClient
import logging
import os
import time
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Telegram API
api_id = ""
api_hash = ""
session_file = "anon.session"
downloaded_list_file = "downloaded_files.txt"
seen_reports_file = "reports_seen.txt"
uploaded_reports_file = "reports_uploaded.txt"

SOURCE_CHANNEL_ID = ""  # ID –∫–∞–Ω–∞–ª–∞, –æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º Excel
TARGET_CHANNEL = ""       # –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –≤—ã–≥—Ä—É–∑–∫–∏
DOWNLOAD_FOLDER = 'downloads/'
REPORTS_FOLDER = '/home/chromeuser/reports/'

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def read_log_set(file_path):
    return set(open(file_path).read().splitlines()) if os.path.exists(file_path) else set()

def append_to_log(file_path, entry):
    with open(file_path, 'a') as f:
        f.write(entry + '\n')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram
async def download_excel_files():
    chat = await client.get_entity(SOURCE_CHANNEL_ID)
    logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {chat.title}")

    messages = await client.get_messages(chat, limit=100)
    downloaded_files = read_log_set(downloaded_list_file)

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª—ã (–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "migrated")
    excel_messages = []
    for message in messages:
        if message.document and message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
            file_name = message.document.attributes[0].file_name
            if "migrated" not in file_name.lower():
                excel_messages.append((message, file_name))

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö Excel-—Ñ–∞–π–ª–æ–≤
    last_10_excel = excel_messages[:10]

    for message, file_name in last_10_excel:
        if file_name in downloaded_files:
            logger.info(f"–§–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ: {file_name}")
            continue

        file_path = os.path.join(DOWNLOAD_FOLDER, file_name)
        await message.download_media(file_path)
        logger.info(f"–°–∫–∞—á–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_name}")
        append_to_log(downloaded_list_file, file_name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤ –∏–∑ reports
async def process_reports_folder():
    current_files = sorted([
        f for f in os.listdir(REPORTS_FOLDER)
        if f.endswith('.xlsx')
    ])

    seen_files = read_log_set(seen_reports_file)
    uploaded_files = read_log_set(uploaded_reports_file)

    new_files = set(current_files) - seen_files
    pending_files = [f for f in current_files if f in seen_files and f not in uploaded_files]

    for f in new_files:
        append_to_log(seen_reports_file, f)

    if new_files and pending_files:
        file_to_send = pending_files[0]
        file_path = os.path.join(REPORTS_FOLDER, file_to_send)

        try:
            # Unicode-—ç–º–æ–¥–∑–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã –¥–ª—è UTF-8)
            package = "\U0001F4E6"  # Ì†ΩÌ≥¶
            rocket = "\U0001F680"   # Ì†ΩÌ∫Ä
            fire = "\U0001F525"     # Ì†ΩÌ¥•
            boom = "\U0001F4A5"     # Ì†ΩÌ≤•

            # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel
            df = pd.read_excel(file_path, header=None)
            total_tokens = df.iloc[1, 2]  # C2
            max_rocket = df.iloc[1, 3]    # D2
            more_than_5x = df.iloc[1, 5]  # F2
            more_than_10x = df.iloc[1, 6] # G2

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ 0
            value_5x = 0 if str(more_than_5x).strip() == "0" else more_than_5x
            value_10x = 0 if str(more_than_10x).strip() == "0" else more_than_10x

            # –ü–æ–¥–ø–∏—Å—å
            caption = (
                f"{package} Total Tokens: {total_tokens}\n"
                f"{rocket} Max Rocket: {max_rocket}\n"
                f"{fire} >5x: {value_5x}\n"
                f"{boom} >10x: {value_10x}"
            )

            await client.send_file(TARGET_CHANNEL, file_path, caption=caption, force_document=True)
            append_to_log(uploaded_reports_file, file_to_send)
            os.remove(file_path)
            logger.info(f"–§–∞–π–ª {file_to_send} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {file_to_send}: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
with TelegramClient(session_file, api_id, api_hash,
                    device_model="PC",
                    system_version="Windows 10",
                    app_version="4.5.1",
                    lang_code="en") as client:
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    client.loop.run_until_complete(download_excel_files())

    # –¶–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ reports
    while True:
        try:
            # –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è–ª–æ—Å—å
            client.loop.run_until_complete(client.get_me())
            logger.debug("–ü–∏–Ω–≥ Telegram: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.")

            # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–∞
            client.loop.run_until_complete(process_reports_folder())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

        time.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞
